<?xml version="1.0" encoding="UTF-8"?>

<project name="meyou_data" default="all" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<property name="src.dir" value="${basedir}/src"/>
	<property name="test.dir" value="${basedir}/test"/>
	<property name="compile.dir" value="${basedir}/work"/>
	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="conf.dir" value="${basedir}/conf"/>
	<property file="${conf.dir}/build.properties"/>


	<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
			 uri="antlib:org.apache.maven.artifact.ant"
			 classpath="${basedir}/ant-lib/maven-ant-tasks-2.1.3.jar" />


	<artifact:pom id="wdata" file="${conf.dir}/pom.xml" settingsFile="${conf.dir}/settings.xml"/>
	<artifact:dependencies pathId="dependency.classpath" pomRefId="wdata">
		<localRepository path="${lib.dir}"/>
	</artifact:dependencies>


	<target name="dist-clean" depends="clean" description="Cleans up all build-generated output( library cache included )" >
		<delete dir="${lib.dir}" failonerror="false"/>
	</target>

	<target name="clean" description="Cleans up all build-generated output">
		<delete dir="${compile.dir}" failonerror="false"/>
		<delete dir="${basedir}" includes="${jar.name},${server_config.name}" failonerror="false" />
	</target>

	<target name="compile">
		<mkdir dir="${compile.dir}"/>
		<javac  destdir="${compile.dir}" includeAntRuntime="no" encoding="UTF8" debug="true">
			<src path="${src.dir}"/>
			<classpath refid="dependency.classpath"/>
		</javac>

		<javac destdir="${compile.dir}" includeAntRuntime="no" encoding="UTF8" debug="true">
			<src path="${test.dir}" />
			<classpath refid="dependency.classpath" />
		</javac>

		<copy todir="${compile.dir}">
			<fileset dir="${src.dir}" includes="**/*.properties" />
			<fileset dir="${src.dir}" includes="**/*.xml" excludes="build.xml" />
		</copy>
	</target>

	<!-- convert classpath to a flat list/string for use in manifest task -->
	<pathconvert property="mf.classpath" pathsep=" ">
		<path refid="dependency.classpath" />
		<flattenmapper />
	</pathconvert>
	<target name="jar" depends="compile">
		<jar jarfile="${basedir}/${jar.name}" index="true">
			<fileset dir="${compile.dir}" includes="**/*.class" />
<!--
			<fileset dir="${src.dir}" includes="**/*.xml" />
			<fileset dir="${src.dir}" includes="**/*.properties" />
-->
		</jar>
	</target>

	<!--Simply generate the packages for test-->
	<target name="test" depends="compile">
	  <!--Temp file for filter classes in external jars-->
	  <jar jarfile="${compile.dir}/external-libs.jar">
		<zipgroupfileset dir="${lib.dir}" includes="**/*.jar"/>
	  </jar>
	  <jar jarfile="${basedir}/${jar4test.name}" index="true">
		<fileset dir="${compile.dir}" includes="**/*.class" />
		<zipfileset src="${compile.dir}/external-libs.jar">
		  <!--<include name="**/*.class"/>-->
		  <!-- <exclude name="**/*.xml"/> -->
		</zipfileset>
		<metainf dir="${conf.dir}" includes="aop.xml"/>
		<manifest>
		  <attribute name="Class-Path" value="${mf.classpath}"/>
		</manifest>
	  </jar>
	  <delete file="${compile.dir}/external-libs.jar"/>
	</target>

	<target name="eclipse">
		<delete file="${basedir}/.classpath" failonerror="false"/>
		<taskdef name="eclipse" classname="prantl.ant.eclipse.EclipseTask"
			   classpath="${basedir}/ant-lib/ant-eclipse-1.0-jvm1.2.jar"/>
		<eclipse>
			<classpath>
				<source path="${src.dir}"/>
				<source path="${test.dir}"/>
				<output path="${compile.dir}"/>
				<library pathref="dependency.classpath"/> 
			</classpath>
		</eclipse>
	</target>

	<target name="deploy" depends="jar">
	  <property name="projectVersion" value="${versionCandidate}-SNAPSHOT"/>	  
	  <artifact:deploy file="${basedir}/${jar.name}">
		<remoteRepository id="weibo.snapshot" url="http://redmine.intra.weibo.com:8081/nexus/content/repositories/snapshots">
		  <authentication username="${snapshotUser}" password="${snapshotPass}" /> 
		</remoteRepository>
		<!--reload pom file to set the version variable-->
		<pom id="wdataDeploy" file="${conf.dir}/pom.xml" settingsFile="${conf.dir}/settings.xml"/>
	  </artifact:deploy>
	</target>

	<!--Release the package, you should change the versionCandidate in file: build.properties for future releases manually. -->
	<!--Oops? Maybe we should find a way to do this automatically? -->
	<target name="release" depends="jar">
	  <property name="projectVersion" value="${versionCandidate}"/>
	  <artifact:deploy file="${basedir}/${jar.name}">
		<remoteRepository id="weibo.release" url="http://redmine.intra.weibo.com:8081/nexus/content/repositories/releases">		 
		  <authentication username="${releaseUser}" password="${releasePass}" /> 
		</remoteRepository>
		<!--reload pom file to set the version variable-->
		<pom id="wdataDeploy" file="${conf.dir}/pom.xml" settingsFile="${conf.dir}/settings.xml"/>
	  </artifact:deploy>
	</target>

	<target name="all" depends="clean,jar" />
</project>
